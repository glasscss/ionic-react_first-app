{"version":3,"file":"static/js/665.a76a70fb.chunk.js","mappings":"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","sources":["../node_modules/@capacitor-community/bluetooth-le/src/timeout.ts","../node_modules/@capacitor-community/bluetooth-le/src/web.ts"],"sourcesContent":["export async function runWithTimeout(promise: Promise<unknown>, time: number, exception: symbol): Promise<unknown> {\n  let timer: ReturnType<typeof setTimeout>;\n  return Promise.race([\n    promise,\n    new Promise((_, reject) => {\n      timer = setTimeout(() => reject(exception), time);\n    }),\n  ]).finally(() => clearTimeout(timer));\n}\n","import { WebPlugin } from '@capacitor/core';\n\nimport { hexStringToDataView, mapToObject, webUUIDToString } from './conversion';\nimport type {\n  BleCharacteristic,\n  BleCharacteristicProperties,\n  BleDescriptor,\n  BleService,\n  TimeoutOptions,\n  BleDevice,\n  BleServices,\n  BluetoothLePlugin,\n  BooleanResult,\n  DeviceIdOptions,\n  GetConnectedDevicesOptions,\n  GetDevicesOptions,\n  GetDevicesResult,\n  ReadDescriptorOptions,\n  ReadOptions,\n  ReadResult,\n  ReadRssiResult,\n  RequestBleDeviceOptions,\n  ScanResultInternal,\n  WriteOptions,\n  WriteDescriptorOptions,\n} from './definitions';\nimport { runWithTimeout } from './timeout';\n\nexport class BluetoothLeWeb extends WebPlugin implements BluetoothLePlugin {\n  private deviceMap = new Map<string, BluetoothDevice>();\n  private discoveredDevices = new Map<string, boolean>();\n  private scan: BluetoothLEScan | null = null;\n  private requestBleDeviceOptions: RequestBleDeviceOptions | undefined;\n  private DEFAULT_CONNECTION_TIMEOUT = 10000;\n\n  async initialize(): Promise<void> {\n    if (typeof navigator === 'undefined' || !navigator.bluetooth) {\n      throw this.unavailable('Web Bluetooth API not available in this browser.');\n    }\n    const isAvailable = await navigator.bluetooth.getAvailability();\n    if (!isAvailable) {\n      throw this.unavailable('No Bluetooth radio available.');\n    }\n  }\n\n  async isEnabled(): Promise<BooleanResult> {\n    // not available on web\n    return { value: true };\n  }\n\n  async enable(): Promise<void> {\n    throw this.unavailable('enable is not available on web.');\n  }\n\n  async disable(): Promise<void> {\n    throw this.unavailable('disable is not available on web.');\n  }\n\n  async startEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async stopEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async isLocationEnabled(): Promise<BooleanResult> {\n    throw this.unavailable('isLocationEnabled is not available on web.');\n  }\n\n  async openLocationSettings(): Promise<void> {\n    throw this.unavailable('openLocationSettings is not available on web.');\n  }\n\n  async openBluetoothSettings(): Promise<void> {\n    throw this.unavailable('openBluetoothSettings is not available on web.');\n  }\n\n  async openAppSettings(): Promise<void> {\n    throw this.unavailable('openAppSettings is not available on web.');\n  }\n\n  async setDisplayStrings(): Promise<void> {\n    // not available on web\n  }\n\n  async requestDevice(options?: RequestBleDeviceOptions): Promise<BleDevice> {\n    const filters = this.getFilters(options);\n    const device = await navigator.bluetooth.requestDevice({\n      filters: filters.length ? filters : undefined,\n      optionalServices: options?.optionalServices,\n      acceptAllDevices: filters.length === 0,\n    });\n    this.deviceMap.set(device.id, device);\n    const bleDevice = this.getBleDevice(device);\n    return bleDevice;\n  }\n\n  async requestLEScan(options?: RequestBleDeviceOptions): Promise<void> {\n    this.requestBleDeviceOptions = options;\n    const filters = this.getFilters(options);\n    await this.stopLEScan();\n    this.discoveredDevices = new Map<string, boolean>();\n    navigator.bluetooth.removeEventListener(\n      'advertisementreceived',\n      this.onAdvertisementReceivedCallback as EventListener\n    );\n    navigator.bluetooth.addEventListener('advertisementreceived', this.onAdvertisementReceivedCallback);\n    this.scan = await navigator.bluetooth.requestLEScan({\n      filters: filters.length ? filters : undefined,\n      acceptAllAdvertisements: filters.length === 0,\n      keepRepeatedDevices: options?.allowDuplicates,\n    });\n  }\n\n  private onAdvertisementReceivedCallback = this.onAdvertisementReceived.bind(this);\n\n  private onAdvertisementReceived(event: BluetoothAdvertisingEvent): void {\n    const deviceId = event.device.id;\n    this.deviceMap.set(deviceId, event.device);\n    const isNew = !this.discoveredDevices.has(deviceId);\n    if (isNew || this.requestBleDeviceOptions?.allowDuplicates) {\n      this.discoveredDevices.set(deviceId, true);\n      const device = this.getBleDevice(event.device);\n      const result: ScanResultInternal = {\n        device,\n        localName: device.name,\n        rssi: event.rssi,\n        txPower: event.txPower,\n        manufacturerData: mapToObject(event.manufacturerData),\n        serviceData: mapToObject(event.serviceData),\n        uuids: event.uuids?.map(webUUIDToString),\n      };\n      this.notifyListeners('onScanResult', result);\n    }\n  }\n\n  async stopLEScan(): Promise<void> {\n    if (this.scan?.active) {\n      this.scan.stop();\n    }\n    this.scan = null;\n  }\n\n  async getDevices(_options: GetDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices.map((device) => {\n      this.deviceMap.set(device.id, device);\n      const bleDevice = this.getBleDevice(device);\n      return bleDevice;\n    });\n    return { devices: bleDevices };\n  }\n\n  async getConnectedDevices(_options: GetConnectedDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices\n      .filter((device) => {\n        return device.gatt?.connected;\n      })\n      .map((device) => {\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n      });\n    return { devices: bleDevices };\n  }\n\n  async connect(options: DeviceIdOptions & TimeoutOptions): Promise<void> {\n    const device = this.getDeviceFromMap(options.deviceId);\n    device.removeEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    device.addEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    const timeoutError = Symbol();\n    if (device.gatt === undefined) {\n      throw new Error('No gatt server available.');\n    }\n    try {\n      const timeout = options.timeout ?? this.DEFAULT_CONNECTION_TIMEOUT;\n      await runWithTimeout(device.gatt.connect(), timeout, timeoutError);\n    } catch (error) {\n      // cancel pending connect call, does not work yet in chromium because of a bug:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=684073\n      await device.gatt?.disconnect();\n      if (error === timeoutError) {\n        throw new Error('Connection timeout');\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private onDisconnectedCallback = this.onDisconnected.bind(this);\n\n  private onDisconnected(event: Event): void {\n    const deviceId = (event.target as BluetoothDevice).id;\n    const key = `disconnected|${deviceId}`;\n    this.notifyListeners(key, null);\n  }\n\n  async createBond(_options: DeviceIdOptions): Promise<void> {\n    throw this.unavailable('createBond is not available on web.');\n  }\n\n  async isBonded(_options: DeviceIdOptions): Promise<BooleanResult> {\n    throw this.unavailable('isBonded is not available on web.');\n  }\n\n  async disconnect(options: DeviceIdOptions): Promise<void> {\n    this.getDeviceFromMap(options.deviceId).gatt?.disconnect();\n  }\n\n  async getServices(options: DeviceIdOptions): Promise<BleServices> {\n    const services = (await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryServices()) ?? [];\n    const bleServices: BleService[] = [];\n    for (const service of services) {\n      const characteristics = await service.getCharacteristics();\n      const bleCharacteristics: BleCharacteristic[] = [];\n      for (const characteristic of characteristics) {\n        bleCharacteristics.push({\n          uuid: characteristic.uuid,\n          properties: this.getProperties(characteristic),\n          descriptors: await this.getDescriptors(characteristic),\n        });\n      }\n      bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });\n    }\n    return { services: bleServices };\n  }\n\n  private async getDescriptors(characteristic: BluetoothRemoteGATTCharacteristic): Promise<BleDescriptor[]> {\n    try {\n      const descriptors = await characteristic.getDescriptors();\n      return descriptors.map((descriptor) => ({\n        uuid: descriptor.uuid,\n      }));\n    } catch {\n      return [];\n    }\n  }\n\n  private getProperties(characteristic: BluetoothRemoteGATTCharacteristic): BleCharacteristicProperties {\n    return {\n      broadcast: characteristic.properties.broadcast,\n      read: characteristic.properties.read,\n      writeWithoutResponse: characteristic.properties.writeWithoutResponse,\n      write: characteristic.properties.write,\n      notify: characteristic.properties.notify,\n      indicate: characteristic.properties.indicate,\n      authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites,\n      reliableWrite: characteristic.properties.reliableWrite,\n      writableAuxiliaries: characteristic.properties.writableAuxiliaries,\n    };\n  }\n\n  private async getCharacteristic(\n    options: ReadOptions | WriteOptions\n  ): Promise<BluetoothRemoteGATTCharacteristic | undefined> {\n    const service = await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryService(options?.service);\n    return service?.getCharacteristic(options?.characteristic);\n  }\n\n  private async getDescriptor(\n    options: ReadDescriptorOptions | WriteDescriptorOptions\n  ): Promise<BluetoothRemoteGATTDescriptor | undefined> {\n    const characteristic = await this.getCharacteristic(options);\n    return characteristic?.getDescriptor(options?.descriptor);\n  }\n\n  async readRssi(_options: DeviceIdOptions): Promise<ReadRssiResult> {\n    throw this.unavailable('readRssi is not available on web.');\n  }\n\n  async read(options: ReadOptions): Promise<ReadResult> {\n    const characteristic = await this.getCharacteristic(options);\n    const value = await characteristic?.readValue();\n    return { value };\n  }\n\n  async write(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithResponse(dataView);\n  }\n\n  async writeWithoutResponse(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithoutResponse(dataView);\n  }\n\n  async readDescriptor(options: ReadDescriptorOptions): Promise<ReadResult> {\n    const descriptor = await this.getDescriptor(options);\n    const value = await descriptor?.readValue();\n    return { value };\n  }\n\n  async writeDescriptor(options: WriteDescriptorOptions): Promise<void> {\n    const descriptor = await this.getDescriptor(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await descriptor?.writeValue(dataView);\n  }\n\n  async startNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    characteristic?.removeEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    characteristic?.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    await characteristic?.startNotifications();\n  }\n\n  private onCharacteristicValueChangedCallback = this.onCharacteristicValueChanged.bind(this);\n\n  private onCharacteristicValueChanged(event: Event): void {\n    const characteristic = event.target as BluetoothRemoteGATTCharacteristic;\n    const key = `notification|${characteristic.service?.device.id}|${characteristic.service?.uuid}|${characteristic.uuid}`;\n    this.notifyListeners(key, {\n      value: characteristic.value,\n    });\n  }\n\n  async stopNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    await characteristic?.stopNotifications();\n  }\n\n  private getFilters(options?: RequestBleDeviceOptions): BluetoothLEScanFilter[] {\n    const filters: BluetoothLEScanFilter[] = [];\n    for (const service of options?.services ?? []) {\n      filters.push({\n        services: [service],\n        name: options?.name,\n        namePrefix: options?.namePrefix,\n      });\n    }\n    if ((options?.name || options?.namePrefix) && filters.length === 0) {\n      filters.push({\n        name: options.name,\n        namePrefix: options.namePrefix,\n      });\n    }\n    return filters;\n  }\n\n  private getDeviceFromMap(deviceId: string): BluetoothDevice {\n    const device = this.deviceMap.get(deviceId);\n    if (device === undefined) {\n      throw new Error('Device not found. Call \"requestDevice\", \"requestLEScan\" or \"getDevices\" first.');\n    }\n    return device;\n  }\n\n  private getBleDevice(device: BluetoothDevice): BleDevice {\n    const bleDevice: BleDevice = {\n      deviceId: device.id,\n      // use undefined instead of null if name is not available\n      name: device.name ?? undefined,\n      uuids: device.uuids,\n    };\n    return bleDevice;\n  }\n}\n"],"names":["runWithTimeout","promise","time","exception","Promise","race","_","reject","timer","setTimeout","finally","clearTimeout","BluetoothLeWeb","deviceMap","Map","discoveredDevices","scan","DEFAULT_CONNECTION_TIMEOUT","onAdvertisementReceivedCallback","onAdvertisementReceived","bind","onDisconnectedCallback","onDisconnected","onCharacteristicValueChangedCallback","onCharacteristicValueChanged","navigator","bluetooth","this","unavailable","getAvailability","value","options","filters","getFilters","requestDevice","length","undefined","optionalServices","acceptAllDevices","device","set","id","bleDevice","getBleDevice","requestBleDeviceOptions","stopLEScan","removeEventListener","addEventListener","requestLEScan","acceptAllAdvertisements","keepRepeatedDevices","allowDuplicates","event","deviceId","has","_a","result","localName","name","rssi","txPower","manufacturerData","mapToObject","serviceData","uuids","_b","map","webUUIDToString","notifyListeners","active","stop","_options","getDevices","devices","bleDevices","filter","gatt","connected","getDeviceFromMap","timeoutError","Symbol","Error","timeout","connect","disconnect","target","key","getPrimaryServices","services","bleServices","service","getCharacteristics","characteristics","bleCharacteristics","characteristic","uuid","getProperties","getDescriptors","properties","descriptors","push","descriptor","broadcast","read","writeWithoutResponse","write","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","getPrimaryService","getCharacteristic","getDescriptor","readValue","dataView","hexStringToDataView","writeValueWithResponse","writeValueWithoutResponse","writeValue","startNotifications","stopNotifications","namePrefix","get","WebPlugin"],"sourceRoot":""}