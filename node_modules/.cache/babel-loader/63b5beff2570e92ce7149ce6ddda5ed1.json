{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.group = 'CapacitorStorage';\n  }\n\n  async configure(_ref) {\n    let {\n      group\n    } = _ref;\n\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n\n  async get(options) {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n    return {\n      value\n    };\n  }\n\n  async set(options) {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n\n  async remove(options) {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n\n  async keys() {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n    return {\n      keys\n    };\n  }\n\n  async clear() {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n\n  async migrate() {\n    var _a;\n\n    const migrated = [];\n    const existing = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n      const {\n        value: currentValue\n      } = await this.get({\n        key\n      });\n\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({\n          key,\n          value\n        });\n        migrated.push(key);\n      }\n    }\n\n    return {\n      migrated,\n      existing\n    };\n  }\n\n  async removeOld() {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n\n  get impl() {\n    return window.localStorage;\n  }\n\n  get prefix() {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n\n  rawKeys() {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n\n  applyPrefix(key) {\n    return this.prefix + key;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAaA,OAAM,MAAOC,UAAP,SAA0BD,SAA1B,CAAmC;EAAzCE;;IACU,aAAQ,kBAAR;EA+ET;;EA7EuB,MAATC,SAAS,OAA4B;IAAA,IAA3B;MAAEC;IAAF,CAA2B;;IAChD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,KAAKA,KAAL,GAAaA,KAAb;IACD;EACF;;EAEe,MAAHC,GAAG,CAACC,OAAD,EAAoB;IAClC,MAAMC,KAAK,GAAG,KAAKC,IAAL,CAAUC,OAAV,CAAkB,KAAKC,WAAL,CAAiBJ,OAAO,CAACK,GAAzB,CAAlB,CAAd;IAEA,OAAO;MAAEJ;IAAF,CAAP;EACD;;EAEe,MAAHK,GAAG,CAACN,OAAD,EAAoB;IAClC,KAAKE,IAAL,CAAUK,OAAV,CAAkB,KAAKH,WAAL,CAAiBJ,OAAO,CAACK,GAAzB,CAAlB,EAAiDL,OAAO,CAACC,KAAzD;EACD;;EAEkB,MAANO,MAAM,CAACR,OAAD,EAAuB;IACxC,KAAKE,IAAL,CAAUO,UAAV,CAAqB,KAAKL,WAAL,CAAiBJ,OAAO,CAACK,GAAzB,CAArB;EACD;;EAEgB,MAAJK,IAAI;IACf,MAAMA,IAAI,GAAG,KAAKC,OAAL,GAAeC,GAAf,CAAmBC,CAAC,IAAIA,CAAC,CAACC,SAAF,CAAY,KAAKC,MAAL,CAAYC,MAAxB,CAAxB,CAAb;IAEA,OAAO;MAAEN;IAAF,CAAP;EACD;;EAEiB,MAALO,KAAK;IAChB,KAAK,MAAMZ,GAAX,IAAkB,KAAKM,OAAL,EAAlB,EAAkC;MAChC,KAAKT,IAAL,CAAUO,UAAV,CAAqBJ,GAArB;IACD;EACF;;EAEmB,MAAPa,OAAO;;;IAClB,MAAMC,QAAQ,GAAa,EAA3B;IACA,MAAMC,QAAQ,GAAa,EAA3B;IACA,MAAMC,SAAS,GAAG,OAAlB;IACA,MAAMX,IAAI,GAAGY,MAAM,CAACZ,IAAP,CAAY,KAAKR,IAAjB,EAAuBqB,MAAvB,CAA8BV,CAAC,IAAIA,CAAC,CAACW,OAAF,CAAUH,SAAV,MAAyB,CAA5D,CAAb;;IAEA,KAAK,MAAMI,MAAX,IAAqBf,IAArB,EAA2B;MACzB,MAAML,GAAG,GAAGoB,MAAM,CAACX,SAAP,CAAiBO,SAAS,CAACL,MAA3B,CAAZ;MACA,MAAMf,KAAK,SAAG,KAAKC,IAAL,CAAUC,OAAV,CAAkBsB,MAAlB,CAAH,MAA4B,IAA5B,IAA4BC,aAA5B,GAA4BA,EAA5B,GAAgC,EAA3C;MACA,MAAM;QAAEzB,KAAK,EAAE0B;MAAT,IAA0B,MAAM,KAAK5B,GAAL,CAAS;QAAEM;MAAF,CAAT,CAAtC;;MAEA,IAAI,OAAOsB,YAAP,KAAwB,QAA5B,EAAsC;QACpCP,QAAQ,CAACQ,IAAT,CAAcvB,GAAd;MACD,CAFD,MAEO;QACL,MAAM,KAAKC,GAAL,CAAS;UAAED,GAAF;UAAOJ;QAAP,CAAT,CAAN;QACAkB,QAAQ,CAACS,IAAT,CAAcvB,GAAd;MACD;IACF;;IAED,OAAO;MAAEc,QAAF;MAAYC;IAAZ,CAAP;EACD;;EAEqB,MAATS,SAAS;IACpB,MAAMR,SAAS,GAAG,OAAlB;IACA,MAAMX,IAAI,GAAGY,MAAM,CAACZ,IAAP,CAAY,KAAKR,IAAjB,EAAuBqB,MAAvB,CAA8BV,CAAC,IAAIA,CAAC,CAACW,OAAF,CAAUH,SAAV,MAAyB,CAA5D,CAAb;;IACA,KAAK,MAAMI,MAAX,IAAqBf,IAArB,EAA2B;MACzB,KAAKR,IAAL,CAAUO,UAAV,CAAqBgB,MAArB;IACD;EACF;;EAEe,IAAJvB,IAAI;IACd,OAAO4B,MAAM,CAACC,YAAd;EACD;;EAEiB,IAANhB,MAAM;IAChB,OAAO,KAAKjB,KAAL,KAAe,eAAf,GAAiC,EAAjC,GAAsC,GAAG,KAAKA,KAAK,GAA1D;EACD;;EAEOa,OAAO;IACb,OAAOW,MAAM,CAACZ,IAAP,CAAY,KAAKR,IAAjB,EAAuBqB,MAAvB,CAA8BV,CAAC,IAAIA,CAAC,CAACW,OAAF,CAAU,KAAKT,MAAf,MAA2B,CAA9D,CAAP;EACD;;EAEOX,WAAW,CAACC,GAAD,EAAY;IAC7B,OAAO,KAAKU,MAAL,GAAcV,GAArB;EACD;;AA/EsC","names":["WebPlugin","StorageWeb","constructor","configure","group","get","options","value","impl","getItem","applyPrefix","key","set","setItem","remove","removeItem","keys","rawKeys","map","k","substring","prefix","length","clear","migrate","migrated","existing","oldprefix","Object","filter","indexOf","oldkey","_a","currentValue","push","removeOld","window","localStorage"],"sources":["/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@capacitor/storage/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  StoragePlugin,\n  ConfigureOptions,\n  GetOptions,\n  GetResult,\n  SetOptions,\n  RemoveOptions,\n  KeysResult,\n  MigrateResult,\n} from './definitions';\n\nexport class StorageWeb extends WebPlugin implements StoragePlugin {\n  private group = 'CapacitorStorage';\n\n  public async configure({ group }: ConfigureOptions): Promise<void> {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n\n  public async get(options: GetOptions): Promise<GetResult> {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n\n    return { value };\n  }\n\n  public async set(options: SetOptions): Promise<void> {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n\n  public async remove(options: RemoveOptions): Promise<void> {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n\n  public async keys(): Promise<KeysResult> {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n\n    return { keys };\n  }\n\n  public async clear(): Promise<void> {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n\n  public async migrate(): Promise<MigrateResult> {\n    const migrated: string[] = [];\n    const existing: string[] = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = this.impl.getItem(oldkey) ?? '';\n      const { value: currentValue } = await this.get({ key });\n\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({ key, value });\n        migrated.push(key);\n      }\n    }\n\n    return { migrated, existing };\n  }\n\n  public async removeOld(): Promise<void> {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n\n  private get impl(): Storage {\n    return window.localStorage;\n  }\n\n  private get prefix(): string {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n\n  private rawKeys(): string[] {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n\n  private applyPrefix(key: string) {\n    return this.prefix + key;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}