{"ast":null,"code":"import { checkAvailability } from './decorators/common';\nimport { get } from './util';\n\nvar AwesomeCordovaNativePlugin =\n/** @class */\nfunction () {\n  function AwesomeCordovaNativePlugin() {}\n  /**\n   * Returns a boolean that indicates whether the plugin is installed\n   *\n   * @returns {boolean}\n   */\n\n\n  AwesomeCordovaNativePlugin.installed = function () {\n    var isAvailable = checkAvailability(this.pluginRef) === true;\n    return isAvailable;\n  };\n  /**\n   * Returns the original plugin object\n   */\n\n\n  AwesomeCordovaNativePlugin.getPlugin = function () {\n    if (typeof window !== 'undefined') {\n      return get(window, this.pluginRef);\n    }\n\n    return null;\n  };\n  /**\n   * Returns the plugin's name\n   */\n\n\n  AwesomeCordovaNativePlugin.getPluginName = function () {\n    var pluginName = this.pluginName;\n    return pluginName;\n  };\n  /**\n   * Returns the plugin's reference\n   */\n\n\n  AwesomeCordovaNativePlugin.getPluginRef = function () {\n    var pluginRef = this.pluginRef;\n    return pluginRef;\n  };\n  /**\n   * Returns the plugin's install name\n   */\n\n\n  AwesomeCordovaNativePlugin.getPluginInstallName = function () {\n    var plugin = this.plugin;\n    return plugin;\n  };\n  /**\n   * Returns the plugin's supported platforms\n   */\n\n\n  AwesomeCordovaNativePlugin.getSupportedPlatforms = function () {\n    var platform = this.platforms;\n    return platform;\n  };\n\n  AwesomeCordovaNativePlugin.pluginName = '';\n  AwesomeCordovaNativePlugin.pluginRef = '';\n  AwesomeCordovaNativePlugin.plugin = '';\n  AwesomeCordovaNativePlugin.repo = '';\n  AwesomeCordovaNativePlugin.platforms = [];\n  AwesomeCordovaNativePlugin.install = '';\n  return AwesomeCordovaNativePlugin;\n}();\n\nexport { AwesomeCordovaNativePlugin };","map":{"version":3,"mappings":"AAAA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,SAASC,GAAT,QAAoB,QAApB;;AAEA;AAAA;AAAA;EAAA,uCA2DC;EAnDC;;;;;;;EAKOC,uCAAP;IACE,IAAMC,WAAW,GAAGH,iBAAiB,CAAC,KAAKI,SAAN,CAAjB,KAAsC,IAA1D;IACA,OAAOD,WAAP;EACD,CAHM;EAKP;;;;;EAGOD,uCAAP;IACE,IAAI,OAAOG,MAAP,KAAkB,WAAtB,EAAmC;MACjC,OAAOJ,GAAG,CAACI,MAAD,EAAS,KAAKD,SAAd,CAAV;IACD;;IACD,OAAO,IAAP;EACD,CALM;EAOP;;;;;EAGOF,2CAAP;IACE,IAAMI,UAAU,GAAG,KAAKA,UAAxB;IACA,OAAOA,UAAP;EACD,CAHM;EAKP;;;;;EAGOJ,0CAAP;IACE,IAAME,SAAS,GAAG,KAAKA,SAAvB;IACA,OAAOA,SAAP;EACD,CAHM;EAKP;;;;;EAGOF,kDAAP;IACE,IAAMK,MAAM,GAAG,KAAKA,MAApB;IACA,OAAOA,MAAP;EACD,CAHM;EAKP;;;;;EAGOL,mDAAP;IACE,IAAMM,QAAQ,GAAG,KAAKC,SAAtB;IACA,OAAOD,QAAP;EACD,CAHM;;EAtDAN,wCAAa,EAAb;EACAA,uCAAY,EAAZ;EACAA,oCAAS,EAAT;EACAA,kCAAO,EAAP;EACAA,uCAAsB,EAAtB;EACAA,qCAAU,EAAV;EAqDT;AAAC,CA3DD;;SAAaA","names":["checkAvailability","get","AwesomeCordovaNativePlugin","isAvailable","pluginRef","window","pluginName","plugin","platform","platforms"],"sources":["/data/data/com.termux/files/home/Ionic/ExploringApp/src/@awesome-cordova-plugins/core/awesome-cordova-plugin.ts"],"sourcesContent":["import { checkAvailability } from './decorators/common';\nimport { get } from './util';\n\nexport class AwesomeCordovaNativePlugin {\n  static pluginName = '';\n  static pluginRef = '';\n  static plugin = '';\n  static repo = '';\n  static platforms: string[] = [];\n  static install = '';\n\n  /**\n   * Returns a boolean that indicates whether the plugin is installed\n   *\n   * @returns {boolean}\n   */\n  static installed(): boolean {\n    const isAvailable = checkAvailability(this.pluginRef) === true;\n    return isAvailable;\n  }\n\n  /**\n   * Returns the original plugin object\n   */\n  static getPlugin(): any {\n    if (typeof window !== 'undefined') {\n      return get(window, this.pluginRef);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the plugin's name\n   */\n  static getPluginName(): string {\n    const pluginName = this.pluginName;\n    return pluginName;\n  }\n\n  /**\n   * Returns the plugin's reference\n   */\n  static getPluginRef(): string {\n    const pluginRef = this.pluginRef;\n    return pluginRef;\n  }\n\n  /**\n   * Returns the plugin's install name\n   */\n  static getPluginInstallName(): string {\n    const plugin = this.plugin;\n    return plugin;\n  }\n\n  /**\n   * Returns the plugin's supported platforms\n   */\n  static getSupportedPlatforms(): string[] {\n    const platform = this.platforms;\n    return platform;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}