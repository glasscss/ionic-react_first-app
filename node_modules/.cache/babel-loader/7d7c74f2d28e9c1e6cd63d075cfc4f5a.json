{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nimport { ImpactStyle, NotificationType } from './definitions';\nexport class HapticsWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.selectionStarted = false;\n  }\n\n  async impact(options) {\n    const pattern = this.patternForImpact(options === null || options === void 0 ? void 0 : options.style);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async notification(options) {\n    const pattern = this.patternForNotification(options === null || options === void 0 ? void 0 : options.type);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async vibrate(options) {\n    const duration = (options === null || options === void 0 ? void 0 : options.duration) || 300;\n    this.vibrateWithPattern([duration]);\n  }\n\n  async selectionStart() {\n    this.selectionStarted = true;\n  }\n\n  async selectionChanged() {\n    if (this.selectionStarted) {\n      this.vibrateWithPattern([70]);\n    }\n  }\n\n  async selectionEnd() {\n    this.selectionStarted = false;\n  }\n\n  patternForImpact() {\n    let style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ImpactStyle.Heavy;\n\n    if (style === ImpactStyle.Medium) {\n      return [43];\n    } else if (style === ImpactStyle.Light) {\n      return [20];\n    }\n\n    return [61];\n  }\n\n  patternForNotification() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NotificationType.Success;\n\n    if (type === NotificationType.Warning) {\n      return [30, 40, 30, 50, 60];\n    } else if (type === NotificationType.Error) {\n      return [27, 45, 50];\n    }\n\n    return [35, 65, 21];\n  }\n\n  vibrateWithPattern(pattern) {\n    if (navigator.vibrate) {\n      navigator.vibrate(pattern);\n    } else {\n      throw this.unavailable('Browser does not support the vibrate API');\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,eAA9C;AAQA,OAAM,MAAOC,UAAP,SAA0BH,SAA1B,CAAmC;EAAzCI;;IACE,wBAAmB,KAAnB;EA0DD;;EAxDa,MAANC,MAAM,CAACC,OAAD,EAAwB;IAClC,MAAMC,OAAO,GAAG,KAAKC,gBAAL,CAAsBF,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEG,KAA/B,CAAhB;IACA,KAAKC,kBAAL,CAAwBH,OAAxB;EACD;;EAEiB,MAAZI,YAAY,CAACL,OAAD,EAA8B;IAC9C,MAAMC,OAAO,GAAG,KAAKK,sBAAL,CAA4BN,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEO,IAArC,CAAhB;IACA,KAAKH,kBAAL,CAAwBH,OAAxB;EACD;;EAEY,MAAPO,OAAO,CAACR,OAAD,EAAyB;IACpC,MAAMS,QAAQ,GAAG,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,QAAT,KAAqB,GAAtC;IACA,KAAKL,kBAAL,CAAwB,CAACK,QAAD,CAAxB;EACD;;EAEmB,MAAdC,cAAc;IAClB,KAAKC,gBAAL,GAAwB,IAAxB;EACD;;EAEqB,MAAhBC,gBAAgB;IACpB,IAAI,KAAKD,gBAAT,EAA2B;MACzB,KAAKP,kBAAL,CAAwB,CAAC,EAAD,CAAxB;IACD;EACF;;EAEiB,MAAZS,YAAY;IAChB,KAAKF,gBAAL,GAAwB,KAAxB;EACD;;EAEOT,gBAAgB,GAAuC;IAAA,IAAtCC,KAAsC,uEAAjBR,WAAW,CAACmB,KAAK;;IAC7D,IAAIX,KAAK,KAAKR,WAAW,CAACoB,MAA1B,EAAkC;MAChC,OAAO,CAAC,EAAD,CAAP;IACD,CAFD,MAEO,IAAIZ,KAAK,KAAKR,WAAW,CAACqB,KAA1B,EAAiC;MACtC,OAAO,CAAC,EAAD,CAAP;IACD;;IACD,OAAO,CAAC,EAAD,CAAP;EACD;;EAEOV,sBAAsB,GACqB;IAAA,IAAjDC,IAAiD,uEAAxBX,gBAAgB,CAACqB,OAAO;;IAEjD,IAAIV,IAAI,KAAKX,gBAAgB,CAACsB,OAA9B,EAAuC;MACrC,OAAO,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAP;IACD,CAFD,MAEO,IAAIX,IAAI,KAAKX,gBAAgB,CAACuB,KAA9B,EAAqC;MAC1C,OAAO,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAP;IACD;;IACD,OAAO,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAP;EACD;;EAEOf,kBAAkB,CAACH,OAAD,EAAkB;IAC1C,IAAImB,SAAS,CAACZ,OAAd,EAAuB;MACrBY,SAAS,CAACZ,OAAV,CAAkBP,OAAlB;IACD,CAFD,MAEO;MACL,MAAM,KAAKoB,WAAL,CAAiB,0CAAjB,CAAN;IACD;EACF;;AA1DsC","names":["WebPlugin","ImpactStyle","NotificationType","HapticsWeb","constructor","impact","options","pattern","patternForImpact","style","vibrateWithPattern","notification","patternForNotification","type","vibrate","duration","selectionStart","selectionStarted","selectionChanged","selectionEnd","Heavy","Medium","Light","Success","Warning","Error","navigator","unavailable"],"sources":["/data/data/com.termux/files/home/Ionic/MyApp/node_modules/@capacitor/haptics/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport { ImpactStyle, NotificationType } from './definitions';\nimport type {\n  HapticsPlugin,\n  ImpactOptions,\n  NotificationOptions,\n  VibrateOptions,\n} from './definitions';\n\nexport class HapticsWeb extends WebPlugin implements HapticsPlugin {\n  selectionStarted = false;\n\n  async impact(options?: ImpactOptions): Promise<void> {\n    const pattern = this.patternForImpact(options?.style);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async notification(options?: NotificationOptions): Promise<void> {\n    const pattern = this.patternForNotification(options?.type);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async vibrate(options?: VibrateOptions): Promise<void> {\n    const duration = options?.duration || 300;\n    this.vibrateWithPattern([duration]);\n  }\n\n  async selectionStart(): Promise<void> {\n    this.selectionStarted = true;\n  }\n\n  async selectionChanged(): Promise<void> {\n    if (this.selectionStarted) {\n      this.vibrateWithPattern([70]);\n    }\n  }\n\n  async selectionEnd(): Promise<void> {\n    this.selectionStarted = false;\n  }\n\n  private patternForImpact(style: ImpactStyle = ImpactStyle.Heavy): number[] {\n    if (style === ImpactStyle.Medium) {\n      return [43];\n    } else if (style === ImpactStyle.Light) {\n      return [20];\n    }\n    return [61];\n  }\n\n  private patternForNotification(\n    type: NotificationType = NotificationType.Success,\n  ): number[] {\n    if (type === NotificationType.Warning) {\n      return [30, 40, 30, 50, 60];\n    } else if (type === NotificationType.Error) {\n      return [27, 45, 50];\n    }\n    return [35, 65, 21];\n  }\n\n  private vibrateWithPattern(pattern: number[]) {\n    if (navigator.vibrate) {\n      navigator.vibrate(pattern);\n    } else {\n      throw this.unavailable('Browser does not support the vibrate API');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}