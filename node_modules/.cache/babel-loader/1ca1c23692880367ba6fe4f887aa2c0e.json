{"ast":null,"code":"const readAsBase64 = async photo => {\n  // Fetch the photo, read as a blob, then convert to base64 format\n  const response = await fetch(photo.webPath);\n  const blob = await response.blob();\n  return await convertBlobToBase64(blob);\n};\n\nconst convertBlobToBase64 = async blob => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.onerror = reject;\n\n  reader.onload = () => {\n    resolve(reader.result);\n  };\n\n  reader.readAsDataURL(blob);\n});\n\nexport default readAsBase64;","map":{"version":3,"names":["readAsBase64","photo","response","fetch","webPath","blob","convertBlobToBase64","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL"],"sources":["/data/data/com.termux/files/home/Ionic/MyApp/src/utils.tsx"],"sourcesContent":["import {Photo} from '@capacitor/camera';\n\nconst readAsBase64 = async (photo: Photo) => {\n   // Fetch the photo, read as a blob, then convert to base64 format\n   const response = await fetch(photo.webPath!);\n   const blob = await response.blob();\n\n   return await convertBlobToBase64(blob) as string;\n};\n\n\nconst convertBlobToBase64 = async (blob: Blob) => new Promise((resolve, reject) => {\n   const reader = new FileReader();\n   reader.onerror = reject;\n   reader.onload = () => {\n      resolve(reader.result);\n   };\n   reader.readAsDataURL(blob);\n});\nexport default readAsBase64;\n"],"mappings":"AAEA,MAAMA,YAAY,GAAG,MAAOC,KAAP,IAAwB;EAC1C;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,KAAK,CAACG,OAAP,CAA5B;EACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;EAEA,OAAO,MAAMC,mBAAmB,CAACD,IAAD,CAAhC;AACF,CAND;;AASA,MAAMC,mBAAmB,GAAG,MAAOD,IAAP,IAAsB,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAChF,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;EACAD,MAAM,CAACE,OAAP,GAAiBH,MAAjB;;EACAC,MAAM,CAACG,MAAP,GAAgB,MAAM;IACnBL,OAAO,CAACE,MAAM,CAACI,MAAR,CAAP;EACF,CAFD;;EAGAJ,MAAM,CAACK,aAAP,CAAqBV,IAArB;AACF,CAPiD,CAAlD;;AAQA,eAAeL,YAAf"},"metadata":{},"sourceType":"module"}