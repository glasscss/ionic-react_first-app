{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { checkAvailability, getPlugin } from './common';\n/**\n * @param pluginObj\n * @param methodName\n */\n\nfunction overrideFunction(pluginObj, methodName) {\n  return new Observable(function (observer) {\n    var availabilityCheck = checkAvailability(pluginObj, methodName);\n\n    if (availabilityCheck === true) {\n      var pluginInstance_1 = getPlugin(pluginObj.constructor.getPluginRef());\n      pluginInstance_1[methodName] = observer.next.bind(observer);\n      return function () {\n        return pluginInstance_1[methodName] = function () {};\n      };\n    } else {\n      observer.error(availabilityCheck);\n      observer.complete();\n    }\n  });\n}\n/**\n * @param pluginObj\n * @param methodName\n * @param args\n */\n\n\nexport function cordovaFunctionOverride(pluginObj, methodName, args) {\n  if (args === void 0) {\n    args = [];\n  }\n\n  return overrideFunction(pluginObj, methodName);\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAAqC,MAArC;AAEA,SAASC,iBAAT,EAA4BC,SAA5B,QAA6C,UAA7C;AAEA;;;;;AAIA,SAASC,gBAAT,CAA0BC,SAA1B,EAA0CC,UAA1C,EAA4D;EAC1D,OAAO,IAAIL,UAAJ,CAAe,UAACM,QAAD,EAAwB;IAC5C,IAAMC,iBAAiB,GAAGN,iBAAiB,CAACG,SAAD,EAAYC,UAAZ,CAA3C;;IAEA,IAAIE,iBAAiB,KAAK,IAA1B,EAAgC;MAC9B,IAAMC,gBAAc,GAAGN,SAAS,CAACE,SAAS,CAACK,WAAV,CAAsBC,YAAtB,EAAD,CAAhC;MACAF,gBAAc,CAACH,UAAD,CAAd,GAA6BC,QAAQ,CAACK,IAAT,CAAcC,IAAd,CAAmBN,QAAnB,CAA7B;MACA,OAAO;QAAM,OAACE,gBAAc,CAACH,UAAD,CAAd,GAA6B,aAAQ,CAAtC;MAAuC,CAApD;IACD,CAJD,MAIO;MACLC,QAAQ,CAACO,KAAT,CAAeN,iBAAf;MACAD,QAAQ,CAACQ,QAAT;IACD;EACF,CAXM,CAAP;AAYD;AAED;;;;;;;AAKA,OAAM,SAAUC,uBAAV,CAAkCX,SAAlC,EAAkDC,UAAlD,EAAsEW,IAAtE,EAAmG;EAA7B;IAAAA;EAA6B;;EACvG,OAAOb,gBAAgB,CAACC,SAAD,EAAYC,UAAZ,CAAvB;AACD","names":["Observable","checkAvailability","getPlugin","overrideFunction","pluginObj","methodName","observer","availabilityCheck","pluginInstance_1","constructor","getPluginRef","next","bind","error","complete","cordovaFunctionOverride","args"],"sources":["/data/data/com.termux/files/home/Ionic/ExploringApp/src/@awesome-cordova-plugins/core/decorators/cordova-function-override.ts"],"sourcesContent":["import { Observable, Observer } from 'rxjs';\n\nimport { checkAvailability, getPlugin } from './common';\n\n/**\n * @param pluginObj\n * @param methodName\n */\nfunction overrideFunction(pluginObj: any, methodName: string): Observable<any> {\n  return new Observable((observer: Observer<any>) => {\n    const availabilityCheck = checkAvailability(pluginObj, methodName);\n\n    if (availabilityCheck === true) {\n      const pluginInstance = getPlugin(pluginObj.constructor.getPluginRef());\n      pluginInstance[methodName] = observer.next.bind(observer);\n      return () => (pluginInstance[methodName] = () => {});\n    } else {\n      observer.error(availabilityCheck);\n      observer.complete();\n    }\n  });\n}\n\n/**\n * @param pluginObj\n * @param methodName\n * @param args\n */\nexport function cordovaFunctionOverride(pluginObj: any, methodName: string, args: IArguments | any[] = []) {\n  return overrideFunction(pluginObj, methodName);\n}\n"]},"metadata":{},"sourceType":"module"}