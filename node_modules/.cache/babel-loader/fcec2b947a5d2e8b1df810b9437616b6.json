{"ast":null,"code":"import { Capacitor } from '@capacitor/core';\nimport { dataViewToHexString, hexStringToDataView } from './conversion';\nimport { BluetoothLe } from './plugin';\nimport { getQueue } from './queue';\nimport { validateUUID } from './validators';\n\nclass BleClientClass {\n  constructor() {\n    this.scanListener = null;\n    this.eventListeners = new Map();\n    this.queue = getQueue(true);\n  }\n\n  enableQueue() {\n    this.queue = getQueue(true);\n  }\n\n  disableQueue() {\n    this.queue = getQueue(false);\n  }\n\n  async initialize(options) {\n    await this.queue(async () => {\n      await BluetoothLe.initialize(options);\n    });\n  }\n  /**\n   * Reports whether BLE is enabled on this device.\n   * Always returns `true` on **web**.\n   * @deprecated Use `isEnabled` instead.\n   */\n\n\n  async getEnabled() {\n    return this.isEnabled();\n  }\n\n  async isEnabled() {\n    const enabled = await this.queue(async () => {\n      const result = await BluetoothLe.isEnabled();\n      return result.value;\n    });\n    return enabled;\n  }\n\n  async enable() {\n    await this.queue(async () => {\n      await BluetoothLe.enable();\n    });\n  }\n\n  async disable() {\n    await this.queue(async () => {\n      await BluetoothLe.disable();\n    });\n  }\n\n  async startEnabledNotifications(callback) {\n    await this.queue(async () => {\n      var _a;\n\n      const key = `onEnabledChanged`;\n      await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());\n      const listener = await BluetoothLe.addListener(key, result => {\n        callback(result.value);\n      });\n      this.eventListeners.set(key, listener);\n      await BluetoothLe.startEnabledNotifications();\n    });\n  }\n\n  async stopEnabledNotifications() {\n    await this.queue(async () => {\n      var _a;\n\n      const key = `onEnabledChanged`;\n      await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());\n      this.eventListeners.delete(key);\n      await BluetoothLe.stopEnabledNotifications();\n    });\n  }\n\n  async isLocationEnabled() {\n    const enabled = await this.queue(async () => {\n      const result = await BluetoothLe.isLocationEnabled();\n      return result.value;\n    });\n    return enabled;\n  }\n\n  async openLocationSettings() {\n    await this.queue(async () => {\n      await BluetoothLe.openLocationSettings();\n    });\n  }\n\n  async openBluetoothSettings() {\n    await this.queue(async () => {\n      await BluetoothLe.openBluetoothSettings();\n    });\n  }\n\n  async openAppSettings() {\n    await this.queue(async () => {\n      await BluetoothLe.openAppSettings();\n    });\n  }\n\n  async setDisplayStrings(displayStrings) {\n    await this.queue(async () => {\n      await BluetoothLe.setDisplayStrings(displayStrings);\n    });\n  }\n\n  async requestDevice(options) {\n    const result = await this.queue(async () => {\n      const device = await BluetoothLe.requestDevice(options);\n      return device;\n    });\n    return result;\n  }\n\n  async requestLEScan(options, callback) {\n    await this.queue(async () => {\n      var _a;\n\n      await ((_a = this.scanListener) === null || _a === void 0 ? void 0 : _a.remove());\n      this.scanListener = await BluetoothLe.addListener('onScanResult', resultInternal => {\n        const result = Object.assign(Object.assign({}, resultInternal), {\n          manufacturerData: this.convertObject(resultInternal.manufacturerData),\n          serviceData: this.convertObject(resultInternal.serviceData),\n          rawAdvertisement: resultInternal.rawAdvertisement ? this.convertValue(resultInternal.rawAdvertisement) : undefined\n        });\n        callback(result);\n      });\n      await BluetoothLe.requestLEScan(options);\n    });\n  }\n\n  async stopLEScan() {\n    await this.queue(async () => {\n      var _a;\n\n      await ((_a = this.scanListener) === null || _a === void 0 ? void 0 : _a.remove());\n      this.scanListener = null;\n      await BluetoothLe.stopLEScan();\n    });\n  }\n\n  async getDevices(deviceIds) {\n    return this.queue(async () => {\n      const result = await BluetoothLe.getDevices({\n        deviceIds\n      });\n      return result.devices;\n    });\n  }\n\n  async getConnectedDevices(services) {\n    return this.queue(async () => {\n      const result = await BluetoothLe.getConnectedDevices({\n        services\n      });\n      return result.devices;\n    });\n  }\n\n  async connect(deviceId, onDisconnect, options) {\n    await this.queue(async () => {\n      var _a;\n\n      if (onDisconnect) {\n        const key = `disconnected|${deviceId}`;\n        await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());\n        const listener = await BluetoothLe.addListener(key, () => {\n          onDisconnect(deviceId);\n        });\n        this.eventListeners.set(key, listener);\n      }\n\n      await BluetoothLe.connect(Object.assign({\n        deviceId\n      }, options));\n    });\n  }\n\n  async createBond(deviceId) {\n    await this.queue(async () => {\n      await BluetoothLe.createBond({\n        deviceId\n      });\n    });\n  }\n\n  async isBonded(deviceId) {\n    const isBonded = await this.queue(async () => {\n      const result = await BluetoothLe.isBonded({\n        deviceId\n      });\n      return result.value;\n    });\n    return isBonded;\n  }\n\n  async disconnect(deviceId) {\n    await this.queue(async () => {\n      await BluetoothLe.disconnect({\n        deviceId\n      });\n    });\n  }\n\n  async getServices(deviceId) {\n    const services = await this.queue(async () => {\n      const result = await BluetoothLe.getServices({\n        deviceId\n      });\n      return result.services;\n    });\n    return services;\n  }\n\n  async readRssi(deviceId) {\n    const value = await this.queue(async () => {\n      const result = await BluetoothLe.readRssi({\n        deviceId\n      });\n      return parseFloat(result.value);\n    });\n    return value;\n  }\n\n  async read(deviceId, service, characteristic, options) {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    const value = await this.queue(async () => {\n      const result = await BluetoothLe.read(Object.assign({\n        deviceId,\n        service,\n        characteristic\n      }, options));\n      return this.convertValue(result.value);\n    });\n    return value;\n  }\n\n  async write(deviceId, service, characteristic, value, options) {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    return this.queue(async () => {\n      if (!(value === null || value === void 0 ? void 0 : value.buffer)) {\n        throw new Error('Invalid data.');\n      }\n\n      let writeValue = value;\n\n      if (Capacitor.getPlatform() !== 'web') {\n        // on native we can only write strings\n        writeValue = dataViewToHexString(value);\n      }\n\n      await BluetoothLe.write(Object.assign({\n        deviceId,\n        service,\n        characteristic,\n        value: writeValue\n      }, options));\n    });\n  }\n\n  async writeWithoutResponse(deviceId, service, characteristic, value, options) {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    await this.queue(async () => {\n      if (!(value === null || value === void 0 ? void 0 : value.buffer)) {\n        throw new Error('Invalid data.');\n      }\n\n      let writeValue = value;\n\n      if (Capacitor.getPlatform() !== 'web') {\n        // on native we can only write strings\n        writeValue = dataViewToHexString(value);\n      }\n\n      await BluetoothLe.writeWithoutResponse(Object.assign({\n        deviceId,\n        service,\n        characteristic,\n        value: writeValue\n      }, options));\n    });\n  }\n\n  async readDescriptor(deviceId, service, characteristic, descriptor, options) {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    descriptor = validateUUID(descriptor);\n    const value = await this.queue(async () => {\n      const result = await BluetoothLe.readDescriptor(Object.assign({\n        deviceId,\n        service,\n        characteristic,\n        descriptor\n      }, options));\n      return this.convertValue(result.value);\n    });\n    return value;\n  }\n\n  async writeDescriptor(deviceId, service, characteristic, descriptor, value, options) {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    descriptor = validateUUID(descriptor);\n    return this.queue(async () => {\n      if (!(value === null || value === void 0 ? void 0 : value.buffer)) {\n        throw new Error('Invalid data.');\n      }\n\n      let writeValue = value;\n\n      if (Capacitor.getPlatform() !== 'web') {\n        // on native we can only write strings\n        writeValue = dataViewToHexString(value);\n      }\n\n      await BluetoothLe.writeDescriptor(Object.assign({\n        deviceId,\n        service,\n        characteristic,\n        descriptor,\n        value: writeValue\n      }, options));\n    });\n  }\n\n  async startNotifications(deviceId, service, characteristic, callback) {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    await this.queue(async () => {\n      var _a;\n\n      const key = `notification|${deviceId}|${service}|${characteristic}`;\n      await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());\n      const listener = await BluetoothLe.addListener(key, event => {\n        callback(this.convertValue(event === null || event === void 0 ? void 0 : event.value));\n      });\n      this.eventListeners.set(key, listener);\n      await BluetoothLe.startNotifications({\n        deviceId,\n        service,\n        characteristic\n      });\n    });\n  }\n\n  async stopNotifications(deviceId, service, characteristic) {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    await this.queue(async () => {\n      var _a;\n\n      const key = `notification|${deviceId}|${service}|${characteristic}`;\n      await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());\n      this.eventListeners.delete(key);\n      await BluetoothLe.stopNotifications({\n        deviceId,\n        service,\n        characteristic\n      });\n    });\n  }\n\n  convertValue(value) {\n    if (typeof value === 'string') {\n      return hexStringToDataView(value);\n    } else if (value === undefined) {\n      return new DataView(new ArrayBuffer(0));\n    }\n\n    return value;\n  }\n\n  convertObject(obj) {\n    if (obj === undefined) {\n      return undefined;\n    }\n\n    const result = {};\n\n    for (const key of Object.keys(obj)) {\n      result[key] = this.convertValue(obj[key]);\n    }\n\n    return result;\n  }\n\n}\n\nexport const BleClient = new BleClientClass();","map":{"version":3,"mappings":"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","names":["Capacitor","dataViewToHexString","hexStringToDataView","BluetoothLe","getQueue","validateUUID","BleClientClass","constructor","Map","enableQueue","queue","disableQueue","initialize","options","getEnabled","isEnabled","enabled","result","value","enable","disable","startEnabledNotifications","callback","key","eventListeners","get","_a","remove","listener","addListener","set","stopEnabledNotifications","delete","isLocationEnabled","openLocationSettings","openBluetoothSettings","openAppSettings","setDisplayStrings","displayStrings","requestDevice","device","requestLEScan","scanListener","resultInternal","manufacturerData","convertObject","serviceData","rawAdvertisement","convertValue","undefined","stopLEScan","getDevices","deviceIds","devices","getConnectedDevices","services","connect","deviceId","onDisconnect","Object","createBond","isBonded","disconnect","getServices","readRssi","parseFloat","read","service","characteristic","write","buffer","Error","writeValue","getPlatform","writeWithoutResponse","readDescriptor","descriptor","writeDescriptor","startNotifications","event","stopNotifications","DataView","ArrayBuffer","obj","keys","BleClient"],"sources":["/data/data/com.termux/files/home/Ionic/MyApp/node_modules/@capacitor-community/bluetooth-le/src/bleClient.ts"],"sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\nimport { Capacitor } from '@capacitor/core';\n\nimport type { DisplayStrings } from './config';\nimport { dataViewToHexString, hexStringToDataView } from './conversion';\nimport type {\n  BleDevice,\n  BleService,\n  Data,\n  InitializeOptions,\n  ReadResult,\n  RequestBleDeviceOptions,\n  ScanResult,\n  ScanResultInternal,\n  TimeoutOptions,\n} from './definitions';\nimport { BluetoothLe } from './plugin';\nimport { getQueue } from './queue';\nimport { validateUUID } from './validators';\n\nexport interface BleClientInterface {\n  /**\n   * Initialize Bluetooth Low Energy (BLE). If it fails, BLE might be unavailable on this device.\n   * On **Android** it will ask for the location permission. On **iOS** it will ask for the Bluetooth permission.\n   * For an example, see [usage](#usage).\n   */\n  initialize(options?: InitializeOptions): Promise<void>;\n\n  /**\n   * Reports whether Bluetooth is enabled on this device.\n   * Always returns `true` on **web**.\n   */\n  isEnabled(): Promise<boolean>;\n\n  /**\n   * Enable Bluetooth.\n   * Only available on **Android**.\n   */\n  enable(): Promise<void>;\n\n  /**\n   * Disable Bluetooth.\n   * Only available on **Android**.\n   */\n  disable(): Promise<void>;\n\n  /**\n   * Register a callback function that will be invoked when Bluetooth is enabled (true) or disabled (false) on this device.\n   * Not available on **web** (the callback will never be invoked).\n   * @param callback Callback function to use when the Bluetooth state changes.\n   */\n  startEnabledNotifications(callback: (value: boolean) => void): Promise<void>;\n\n  /**\n   * Stop the enabled notifications registered with `startEnabledNotifications`.\n   */\n  stopEnabledNotifications(): Promise<void>;\n\n  /**\n   * Reports whether Location Services are enabled on this device.\n   * Only available on **Android**.\n   */\n  isLocationEnabled(): Promise<boolean>;\n\n  /**\n   * Open Location settings.\n   * Only available on **Android**.\n   */\n  openLocationSettings(): Promise<void>;\n\n  /**\n   * Open Bluetooth settings.\n   * Only available on **Android**.\n   */\n  openBluetoothSettings(): Promise<void>;\n\n  /**\n   * Open App settings.\n   * Not available on **web**.\n   * On **iOS** when a user declines the request to use Bluetooth on the first call of `initialize`, it is not possible\n   * to request for Bluetooth again from within the app. In this case Bluetooth has to be enabled in the app settings\n   * for the app to be able use it.\n   */\n  openAppSettings(): Promise<void>;\n\n  /**\n   * Set the strings that are displayed in the `requestDevice` dialog.\n   * @param displayStrings\n   */\n  setDisplayStrings(displayStrings: DisplayStrings): Promise<void>;\n\n  /**\n   * Request a peripheral BLE device to interact with. This will scan for available devices according to the filters in the options and show a dialog to pick a device.\n   * For an example, see [usage](#usage).\n   * @param options Device filters, see [RequestBleDeviceOptions](#RequestBleDeviceOptions)\n   */\n  requestDevice(options?: RequestBleDeviceOptions): Promise<BleDevice>;\n\n  /**\n   * Start scanning for BLE devices to interact with according to the filters in the options. The callback will be invoked on each device that is found.\n   * Scanning will continue until `stopLEScan` is called. For an example, see [usage](#usage).\n   * **NOTE**: Use with care on **web** platform, the required API is still behind a flag in most browsers.\n   * @param options\n   * @param callback\n   */\n  requestLEScan(options: RequestBleDeviceOptions, callback: (result: ScanResult) => void): Promise<void>;\n\n  /**\n   * Stop scanning for BLE devices. For an example, see [usage](#usage).\n   */\n  stopLEScan(): Promise<void>;\n\n  /**\n   * On iOS and web, if you want to connect to a previously connected device without scanning first, you can use `getDevice`.\n   * Uses [retrievePeripherals](https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1519127-retrieveperipherals) on iOS and\n   * [getDevices](https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/getDevices) on web.\n   * On Android, you can directly connect to the device with the deviceId.\n   * @param deviceIds List of device IDs, e.g. saved from a previous app run. No used on web.\n   */\n  getDevices(deviceIds: string[]): Promise<BleDevice[]>;\n\n  /**\n   * Get a list of currently connected devices.\n   * Uses [retrieveConnectedPeripherals](https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1518924-retrieveconnectedperipherals) on iOS,\n   * [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothManager#getConnectedDevices(int)) on Android\n   * and [getDevices](https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/getDevices) on web.\n   * @param services List of services to filter the devices by. If no service is specified, no devices will be returned. Only applies to iOS.\n   */\n  getConnectedDevices(services: string[]): Promise<BleDevice[]>;\n\n  /**\n   * Connect to a peripheral BLE device. For an example, see [usage](#usage).\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   * @param onDisconnect Optional disconnect callback function that will be used when the device disconnects\n   * @param options Options for plugin call\n   */\n  connect(deviceId: string, onDisconnect?: (deviceId: string) => void, options?: TimeoutOptions): Promise<void>;\n\n  /**\n   * Create a bond with a peripheral BLE device.\n   * Only available on **Android**. On iOS bonding is handled by the OS.\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   */\n  createBond(deviceId: string): Promise<void>;\n\n  /**\n   * Report whether a peripheral BLE device is bonded.\n   * Only available on **Android**. On iOS bonding is handled by the OS.\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   */\n  isBonded(deviceId: string): Promise<boolean>;\n\n  /**\n   * Disconnect from a peripheral BLE device. For an example, see [usage](#usage).\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   */\n  disconnect(deviceId: string): Promise<void>;\n\n  /**\n   * Get services, characteristics and descriptors of a device.\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   */\n  getServices(deviceId: string): Promise<BleService[]>;\n\n  /**\n   * Read the RSSI value of a connected device.\n   * Not available on web.\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   */\n  readRssi(deviceId: string): Promise<number>;\n\n  /**\n   * Read the value of a characteristic. For an example, see [usage](#usage).\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   * @param service UUID of the service (see [UUID format](#uuid-format))\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\n   * @param options Options for plugin call\n   */\n  read(deviceId: string, service: string, characteristic: string, options?: TimeoutOptions): Promise<DataView>;\n\n  /**\n   * Write a value to a characteristic. For an example, see [usage](#usage).\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   * @param service UUID of the service (see [UUID format](#uuid-format))\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\n   * @param value The value to write as a DataView. To create a DataView from an array of numbers, there is a helper function, e.g. numbersToDataView([1, 0])\n   * @param options Options for plugin call\n   */\n  write(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    value: DataView,\n    options?: TimeoutOptions\n  ): Promise<void>;\n\n  /**\n   * Write a value to a characteristic without waiting for a response.\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   * @param service UUID of the service (see [UUID format](#uuid-format))\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\n   * @param value The value to write as a DataView. To create a DataView from an array of numbers, there is a helper function, e.g. numbersToDataView([1, 0])\n   * @param options Options for plugin call\n   */\n  writeWithoutResponse(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    value: DataView,\n    options?: TimeoutOptions\n  ): Promise<void>;\n\n  /**\n   * Read the value of a descriptor.\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   * @param service UUID of the service (see [UUID format](#uuid-format))\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\n   * @param descriptor UUID of the descriptor (see [UUID format](#uuid-format))\n   * @param options Options for plugin call\n   */\n  readDescriptor(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    descriptor: string,\n    options?: TimeoutOptions\n  ): Promise<DataView>;\n\n  /**\n   * Write a value to a descriptor.\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   * @param service UUID of the service (see [UUID format](#uuid-format))\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\n   * @param descriptor UUID of the descriptor (see [UUID format](#uuid-format))\n   * @param value The value to write as a DataView. To create a DataView from an array of numbers, there is a helper function, e.g. numbersToDataView([1, 0])\n   * @param options Options for plugin call\n   */\n  writeDescriptor(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    descriptor: string,\n    value: DataView,\n    options?: TimeoutOptions\n  ): Promise<void>;\n\n  /**\n   * Start listening to changes of the value of a characteristic.\n   * Note that you should only start the notifications once per characteristic in your app and share the data and\n   * not call `startNotifications` in every component that needs the data.\n   * For an example, see [usage](#usage).\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   * @param service UUID of the service (see [UUID format](#uuid-format))\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\n   * @param callback Callback function to use when the value of the characteristic changes\n   */\n  startNotifications(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    callback: (value: DataView) => void\n  ): Promise<void>;\n\n  /**\n   * Stop listening to the changes of the value of a characteristic. For an example, see [usage](#usage).\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\n   * @param service UUID of the service (see [UUID format](#uuid-format))\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\n   */\n  stopNotifications(deviceId: string, service: string, characteristic: string): Promise<void>;\n}\n\nclass BleClientClass implements BleClientInterface {\n  private scanListener: PluginListenerHandle | null = null;\n  private eventListeners = new Map<string, PluginListenerHandle>();\n  private queue = getQueue(true);\n\n  enableQueue() {\n    this.queue = getQueue(true);\n  }\n\n  disableQueue() {\n    this.queue = getQueue(false);\n  }\n\n  async initialize(options?: InitializeOptions): Promise<void> {\n    await this.queue(async () => {\n      await BluetoothLe.initialize(options);\n    });\n  }\n\n  /**\n   * Reports whether BLE is enabled on this device.\n   * Always returns `true` on **web**.\n   * @deprecated Use `isEnabled` instead.\n   */\n  async getEnabled(): Promise<boolean> {\n    return this.isEnabled();\n  }\n\n  async isEnabled(): Promise<boolean> {\n    const enabled = await this.queue(async () => {\n      const result = await BluetoothLe.isEnabled();\n      return result.value;\n    });\n    return enabled;\n  }\n\n  async enable(): Promise<void> {\n    await this.queue(async () => {\n      await BluetoothLe.enable();\n    });\n  }\n\n  async disable(): Promise<void> {\n    await this.queue(async () => {\n      await BluetoothLe.disable();\n    });\n  }\n\n  async startEnabledNotifications(callback: (value: boolean) => void): Promise<void> {\n    await this.queue(async () => {\n      const key = `onEnabledChanged`;\n      await this.eventListeners.get(key)?.remove();\n      const listener = await BluetoothLe.addListener(key, (result) => {\n        callback(result.value);\n      });\n      this.eventListeners.set(key, listener);\n      await BluetoothLe.startEnabledNotifications();\n    });\n  }\n\n  async stopEnabledNotifications(): Promise<void> {\n    await this.queue(async () => {\n      const key = `onEnabledChanged`;\n      await this.eventListeners.get(key)?.remove();\n      this.eventListeners.delete(key);\n      await BluetoothLe.stopEnabledNotifications();\n    });\n  }\n\n  async isLocationEnabled(): Promise<boolean> {\n    const enabled = await this.queue(async () => {\n      const result = await BluetoothLe.isLocationEnabled();\n      return result.value;\n    });\n    return enabled;\n  }\n\n  async openLocationSettings(): Promise<void> {\n    await this.queue(async () => {\n      await BluetoothLe.openLocationSettings();\n    });\n  }\n\n  async openBluetoothSettings(): Promise<void> {\n    await this.queue(async () => {\n      await BluetoothLe.openBluetoothSettings();\n    });\n  }\n\n  async openAppSettings(): Promise<void> {\n    await this.queue(async () => {\n      await BluetoothLe.openAppSettings();\n    });\n  }\n\n  async setDisplayStrings(displayStrings: DisplayStrings): Promise<void> {\n    await this.queue(async () => {\n      await BluetoothLe.setDisplayStrings(displayStrings);\n    });\n  }\n\n  async requestDevice(options?: RequestBleDeviceOptions): Promise<BleDevice> {\n    const result = await this.queue(async () => {\n      const device = await BluetoothLe.requestDevice(options);\n      return device;\n    });\n    return result;\n  }\n\n  async requestLEScan(options: RequestBleDeviceOptions, callback: (result: ScanResult) => void): Promise<void> {\n    await this.queue(async () => {\n      await this.scanListener?.remove();\n      this.scanListener = await BluetoothLe.addListener('onScanResult', (resultInternal: ScanResultInternal) => {\n        const result: ScanResult = {\n          ...resultInternal,\n          manufacturerData: this.convertObject(resultInternal.manufacturerData),\n          serviceData: this.convertObject(resultInternal.serviceData),\n          rawAdvertisement: resultInternal.rawAdvertisement\n            ? this.convertValue(resultInternal.rawAdvertisement)\n            : undefined,\n        };\n        callback(result);\n      });\n      await BluetoothLe.requestLEScan(options);\n    });\n  }\n\n  async stopLEScan(): Promise<void> {\n    await this.queue(async () => {\n      await this.scanListener?.remove();\n      this.scanListener = null;\n      await BluetoothLe.stopLEScan();\n    });\n  }\n\n  async getDevices(deviceIds: string[]): Promise<BleDevice[]> {\n    return this.queue(async () => {\n      const result = await BluetoothLe.getDevices({ deviceIds });\n      return result.devices;\n    });\n  }\n\n  async getConnectedDevices(services: string[]): Promise<BleDevice[]> {\n    return this.queue(async () => {\n      const result = await BluetoothLe.getConnectedDevices({ services });\n      return result.devices;\n    });\n  }\n\n  async connect(deviceId: string, onDisconnect?: (deviceId: string) => void, options?: TimeoutOptions): Promise<void> {\n    await this.queue(async () => {\n      if (onDisconnect) {\n        const key = `disconnected|${deviceId}`;\n        await this.eventListeners.get(key)?.remove();\n        const listener = await BluetoothLe.addListener(key, () => {\n          onDisconnect(deviceId);\n        });\n        this.eventListeners.set(key, listener);\n      }\n      await BluetoothLe.connect({ deviceId, ...options });\n    });\n  }\n\n  async createBond(deviceId: string): Promise<void> {\n    await this.queue(async () => {\n      await BluetoothLe.createBond({ deviceId });\n    });\n  }\n\n  async isBonded(deviceId: string): Promise<boolean> {\n    const isBonded = await this.queue(async () => {\n      const result = await BluetoothLe.isBonded({ deviceId });\n      return result.value;\n    });\n    return isBonded;\n  }\n\n  async disconnect(deviceId: string): Promise<void> {\n    await this.queue(async () => {\n      await BluetoothLe.disconnect({ deviceId });\n    });\n  }\n\n  async getServices(deviceId: string): Promise<BleService[]> {\n    const services = await this.queue(async () => {\n      const result = await BluetoothLe.getServices({ deviceId });\n      return result.services;\n    });\n    return services;\n  }\n\n  async readRssi(deviceId: string): Promise<number> {\n    const value = await this.queue(async () => {\n      const result = await BluetoothLe.readRssi({ deviceId });\n      return parseFloat(result.value);\n    });\n    return value;\n  }\n\n  async read(deviceId: string, service: string, characteristic: string, options?: TimeoutOptions): Promise<DataView> {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    const value = await this.queue(async () => {\n      const result = await BluetoothLe.read({\n        deviceId,\n        service,\n        characteristic,\n        ...options,\n      });\n      return this.convertValue(result.value);\n    });\n    return value;\n  }\n\n  async write(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    value: DataView,\n    options?: TimeoutOptions\n  ): Promise<void> {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    return this.queue(async () => {\n      if (!value?.buffer) {\n        throw new Error('Invalid data.');\n      }\n      let writeValue: DataView | string = value;\n      if (Capacitor.getPlatform() !== 'web') {\n        // on native we can only write strings\n        writeValue = dataViewToHexString(value);\n      }\n      await BluetoothLe.write({\n        deviceId,\n        service,\n        characteristic,\n        value: writeValue,\n        ...options,\n      });\n    });\n  }\n\n  async writeWithoutResponse(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    value: DataView,\n    options?: TimeoutOptions\n  ): Promise<void> {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    await this.queue(async () => {\n      if (!value?.buffer) {\n        throw new Error('Invalid data.');\n      }\n      let writeValue: DataView | string = value;\n      if (Capacitor.getPlatform() !== 'web') {\n        // on native we can only write strings\n        writeValue = dataViewToHexString(value);\n      }\n      await BluetoothLe.writeWithoutResponse({\n        deviceId,\n        service,\n        characteristic,\n        value: writeValue,\n        ...options,\n      });\n    });\n  }\n\n  async readDescriptor(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    descriptor: string,\n    options?: TimeoutOptions\n  ): Promise<DataView> {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    descriptor = validateUUID(descriptor);\n    const value = await this.queue(async () => {\n      const result = await BluetoothLe.readDescriptor({\n        deviceId,\n        service,\n        characteristic,\n        descriptor,\n        ...options,\n      });\n      return this.convertValue(result.value);\n    });\n    return value;\n  }\n\n  async writeDescriptor(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    descriptor: string,\n    value: DataView,\n    options?: TimeoutOptions\n  ): Promise<void> {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    descriptor = validateUUID(descriptor);\n    return this.queue(async () => {\n      if (!value?.buffer) {\n        throw new Error('Invalid data.');\n      }\n      let writeValue: DataView | string = value;\n      if (Capacitor.getPlatform() !== 'web') {\n        // on native we can only write strings\n        writeValue = dataViewToHexString(value);\n      }\n      await BluetoothLe.writeDescriptor({\n        deviceId,\n        service,\n        characteristic,\n        descriptor,\n        value: writeValue,\n        ...options,\n      });\n    });\n  }\n\n  async startNotifications(\n    deviceId: string,\n    service: string,\n    characteristic: string,\n    callback: (value: DataView) => void\n  ): Promise<void> {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    await this.queue(async () => {\n      const key = `notification|${deviceId}|${service}|${characteristic}`;\n      await this.eventListeners.get(key)?.remove();\n      const listener = await BluetoothLe.addListener(key, (event: ReadResult) => {\n        callback(this.convertValue(event?.value));\n      });\n      this.eventListeners.set(key, listener);\n      await BluetoothLe.startNotifications({\n        deviceId,\n        service,\n        characteristic,\n      });\n    });\n  }\n\n  async stopNotifications(deviceId: string, service: string, characteristic: string): Promise<void> {\n    service = validateUUID(service);\n    characteristic = validateUUID(characteristic);\n    await this.queue(async () => {\n      const key = `notification|${deviceId}|${service}|${characteristic}`;\n      await this.eventListeners.get(key)?.remove();\n      this.eventListeners.delete(key);\n      await BluetoothLe.stopNotifications({\n        deviceId,\n        service,\n        characteristic,\n      });\n    });\n  }\n\n  private convertValue(value?: Data): DataView {\n    if (typeof value === 'string') {\n      return hexStringToDataView(value);\n    } else if (value === undefined) {\n      return new DataView(new ArrayBuffer(0));\n    }\n    return value;\n  }\n\n  private convertObject(obj?: { [key: string]: Data }): { [key: string]: DataView } | undefined {\n    if (obj === undefined) {\n      return undefined;\n    }\n    const result: { [key: string]: DataView } = {};\n    for (const key of Object.keys(obj)) {\n      result[key] = this.convertValue(obj[key]);\n    }\n    return result;\n  }\n}\n\nexport const BleClient = new BleClientClass();\n"]},"metadata":{},"sourceType":"module"}