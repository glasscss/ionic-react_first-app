{"ast":null,"code":"export var ImpactStyle;\n\n(function (ImpactStyle) {\n  /**\n   * A collision between large, heavy user interface elements\n   *\n   * @since 1.0.0\n   */\n  ImpactStyle[\"Heavy\"] = \"HEAVY\";\n  /**\n   * A collision between moderately sized user interface elements\n   *\n   * @since 1.0.0\n   */\n\n  ImpactStyle[\"Medium\"] = \"MEDIUM\";\n  /**\n   * A collision between small, light user interface elements\n   *\n   * @since 1.0.0\n   */\n\n  ImpactStyle[\"Light\"] = \"LIGHT\";\n})(ImpactStyle || (ImpactStyle = {}));\n\nexport var NotificationType;\n\n(function (NotificationType) {\n  /**\n   * A notification feedback type indicating that a task has completed successfully\n   *\n   * @since 1.0.0\n   */\n  NotificationType[\"Success\"] = \"SUCCESS\";\n  /**\n   * A notification feedback type indicating that a task has produced a warning\n   *\n   * @since 1.0.0\n   */\n\n  NotificationType[\"Warning\"] = \"WARNING\";\n  /**\n   * A notification feedback type indicating that a task has failed\n   *\n   * @since 1.0.0\n   */\n\n  NotificationType[\"Error\"] = \"ERROR\";\n})(NotificationType || (NotificationType = {}));\n/**\n * @deprecated Use `NotificationType`.\n * @since 1.0.0\n */\n\n\nexport var HapticsNotificationType = NotificationType;\n/**\n * @deprecated Use `ImpactStyle`.\n * @since 1.0.0\n */\n\nexport var HapticsImpactStyle = ImpactStyle;","map":{"version":3,"mappings":"AA2DA,WAAYA,WAAZ;;AAAA,WAAYA,WAAZ,EAAuB;EACrB;;;;;EAKAA;EAEA;;;;;;EAKAA;EAEA;;;;;;EAKAA;AACD,CArBD,EAAYA,WAAW,KAAXA,WAAW,MAAvB;;AAmCA,WAAYC,gBAAZ;;AAAA,WAAYA,gBAAZ,EAA4B;EAC1B;;;;;EAKAA;EAEA;;;;;;EAKAA;EAEA;;;;;;EAKAA;AACD,CArBD,EAAYA,gBAAgB,KAAhBA,gBAAgB,MAA5B;AA+CA;;;;;;AAIA,OAAO,IAAMC,uBAAuB,GAAGD,gBAAhC;AAEP;;;;;AAIA,OAAO,IAAME,kBAAkB,GAAGH,WAA3B","names":["ImpactStyle","NotificationType","HapticsNotificationType","HapticsImpactStyle"],"sources":["/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@capacitor/haptics/src/definitions.ts"],"sourcesContent":["export interface HapticsPlugin {\n  /**\n   * Trigger a haptics \"impact\" feedback\n   *\n   * @since 1.0.0\n   */\n  impact(options?: ImpactOptions): Promise<void>;\n\n  /**\n   * Trigger a haptics \"notification\" feedback\n   *\n   * @since 1.0.0\n   */\n  notification(options?: NotificationOptions): Promise<void>;\n\n  /**\n   * Vibrate the device\n   *\n   * @since 1.0.0\n   */\n  vibrate(options?: VibrateOptions): Promise<void>;\n\n  /**\n   * Trigger a selection started haptic hint\n   *\n   * @since 1.0.0\n   */\n  selectionStart(): Promise<void>;\n\n  /**\n   * Trigger a selection changed haptic hint. If a selection was\n   * started already, this will cause the device to provide haptic\n   * feedback\n   *\n   * @since 1.0.0\n   */\n  selectionChanged(): Promise<void>;\n\n  /**\n   * If selectionStart() was called, selectionEnd() ends the selection.\n   * For example, call this when a user has lifted their finger from a control\n   *\n   * @since 1.0.0\n   */\n  selectionEnd(): Promise<void>;\n}\n\nexport interface ImpactOptions {\n  /**\n   * Impact Feedback Style\n   *\n   * The mass of the objects in the collision simulated by a [UIImpactFeedbackGenerator](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle) object.\n   *\n   * @default ImpactStyle.Heavy\n   * @since 1.0.0\n   */\n  style: ImpactStyle;\n}\n\nexport enum ImpactStyle {\n  /**\n   * A collision between large, heavy user interface elements\n   *\n   * @since 1.0.0\n   */\n  Heavy = 'HEAVY',\n\n  /**\n   * A collision between moderately sized user interface elements\n   *\n   * @since 1.0.0\n   */\n  Medium = 'MEDIUM',\n\n  /**\n   * A collision between small, light user interface elements\n   *\n   * @since 1.0.0\n   */\n  Light = 'LIGHT',\n}\n\nexport interface NotificationOptions {\n  /**\n   * Notification Feedback Type\n   *\n   * The type of notification feedback generated by a [UINotificationFeedbackGenerator](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype) object.\n   *\n   * @default NotificationType.SUCCESS\n   * @since 1.0.0\n   */\n  type: NotificationType;\n}\n\nexport enum NotificationType {\n  /**\n   * A notification feedback type indicating that a task has completed successfully\n   *\n   * @since 1.0.0\n   */\n  Success = 'SUCCESS',\n\n  /**\n   * A notification feedback type indicating that a task has produced a warning\n   *\n   * @since 1.0.0\n   */\n  Warning = 'WARNING',\n\n  /**\n   * A notification feedback type indicating that a task has failed\n   *\n   * @since 1.0.0\n   */\n  Error = 'ERROR',\n}\n\nexport interface VibrateOptions {\n  /**\n   * Duration of the vibration in milliseconds.\n   *\n   * Not supported in iOS 12 and older.\n   *\n   * @default 300\n   * @since 1.0.0\n   */\n  duration: number;\n}\n\n/**\n * @deprecated Use `ImpactOptions`.\n * @since 1.0.0\n */\nexport type HapticsImpactOptions = ImpactOptions;\n\n/**\n * @deprecated Use `NotificationOptions`.\n * @since 1.0.0\n */\nexport type HapticsNotificationOptions = NotificationOptions;\n\n/**\n * @deprecated Use `NotificationType`.\n * @since 1.0.0\n */\nexport const HapticsNotificationType = NotificationType;\n\n/**\n * @deprecated Use `ImpactStyle`.\n * @since 1.0.0\n */\nexport const HapticsImpactStyle = ImpactStyle;\n"]},"metadata":{},"sourceType":"module"}