{"ast":null,"code":"import _createForOfIteratorHelper from \"/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { WebPlugin } from '@capacitor/core';\nexport var LocalNotificationsWeb = /*#__PURE__*/function (_WebPlugin) {\n  _inherits(LocalNotificationsWeb, _WebPlugin);\n\n  var _super = _createSuper(LocalNotificationsWeb);\n\n  function LocalNotificationsWeb() {\n    var _this;\n\n    _classCallCheck(this, LocalNotificationsWeb);\n\n    _this = _super.apply(this, arguments);\n    _this.pending = [];\n\n    _this.hasNotificationSupport = function () {\n      if (!('Notification' in window) || !Notification.requestPermission) {\n        return false;\n      }\n\n      if (Notification.permission !== 'granted') {\n        // don't test for `new Notification` if permission has already been granted\n        // otherwise this sends a real notification on supported browsers\n        try {\n          new Notification('');\n        } catch (e) {\n          if (e.name == 'TypeError') {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    };\n\n    return _this;\n  }\n\n  _createClass(LocalNotificationsWeb, [{\n    key: \"createChannel\",\n    value: function () {\n      var _createChannel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw this.unimplemented('Not implemented on web.');\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createChannel() {\n        return _createChannel.apply(this, arguments);\n      }\n\n      return createChannel;\n    }()\n  }, {\n    key: \"deleteChannel\",\n    value: function () {\n      var _deleteChannel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                throw this.unimplemented('Not implemented on web.');\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function deleteChannel() {\n        return _deleteChannel.apply(this, arguments);\n      }\n\n      return deleteChannel;\n    }()\n  }, {\n    key: \"listChannels\",\n    value: function () {\n      var _listChannels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throw this.unimplemented('Not implemented on web.');\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function listChannels() {\n        return _listChannels.apply(this, arguments);\n      }\n\n      return listChannels;\n    }()\n  }, {\n    key: \"schedule\",\n    value: function () {\n      var _schedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(options) {\n        var _iterator, _step, notification;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.hasNotificationSupport()) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw this.unavailable('Notifications not supported in this browser.');\n\n              case 2:\n                _iterator = _createForOfIteratorHelper(options.notifications);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    notification = _step.value;\n                    this.sendNotification(notification);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context4.abrupt(\"return\", {\n                  notifications: options.notifications.map(function (notification) {\n                    return {\n                      id: notification.id\n                    };\n                  })\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function schedule(_x) {\n        return _schedule.apply(this, arguments);\n      }\n\n      return schedule;\n    }()\n  }, {\n    key: \"getPending\",\n    value: function () {\n      var _getPending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", {\n                  notifications: this.pending\n                });\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getPending() {\n        return _getPending.apply(this, arguments);\n      }\n\n      return getPending;\n    }()\n  }, {\n    key: \"registerActionTypes\",\n    value: function () {\n      var _registerActionTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                throw this.unimplemented('Not implemented on web.');\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function registerActionTypes() {\n        return _registerActionTypes.apply(this, arguments);\n      }\n\n      return registerActionTypes;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(pending) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.pending = this.pending.filter(function (notification) {\n                  return !pending.notifications.find(function (n) {\n                    return n.id === notification.id;\n                  });\n                });\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function cancel(_x2) {\n        return _cancel.apply(this, arguments);\n      }\n\n      return cancel;\n    }()\n  }, {\n    key: \"areEnabled\",\n    value: function () {\n      var _areEnabled = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _yield$this$checkPerm, display;\n\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.checkPermissions();\n\n              case 2:\n                _yield$this$checkPerm = _context8.sent;\n                display = _yield$this$checkPerm.display;\n                return _context8.abrupt(\"return\", {\n                  value: display === 'granted'\n                });\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function areEnabled() {\n        return _areEnabled.apply(this, arguments);\n      }\n\n      return areEnabled;\n    }()\n  }, {\n    key: \"requestPermissions\",\n    value: function () {\n      var _requestPermissions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var display;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (this.hasNotificationSupport()) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                throw this.unavailable('Notifications not supported in this browser.');\n\n              case 2:\n                _context9.t0 = this;\n                _context9.next = 5;\n                return Notification.requestPermission();\n\n              case 5:\n                _context9.t1 = _context9.sent;\n                display = _context9.t0.transformNotificationPermission.call(_context9.t0, _context9.t1);\n                return _context9.abrupt(\"return\", {\n                  display: display\n                });\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function requestPermissions() {\n        return _requestPermissions.apply(this, arguments);\n      }\n\n      return requestPermissions;\n    }()\n  }, {\n    key: \"checkPermissions\",\n    value: function () {\n      var _checkPermissions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var display;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (this.hasNotificationSupport()) {\n                  _context10.next = 2;\n                  break;\n                }\n\n                throw this.unavailable('Notifications not supported in this browser.');\n\n              case 2:\n                display = this.transformNotificationPermission(Notification.permission);\n                return _context10.abrupt(\"return\", {\n                  display: display\n                });\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function checkPermissions() {\n        return _checkPermissions.apply(this, arguments);\n      }\n\n      return checkPermissions;\n    }()\n  }, {\n    key: \"transformNotificationPermission\",\n    value: function transformNotificationPermission(permission) {\n      switch (permission) {\n        case 'granted':\n          return 'granted';\n\n        case 'denied':\n          return 'denied';\n\n        default:\n          return 'prompt';\n      }\n    }\n  }, {\n    key: \"sendPending\",\n    value: function sendPending() {\n      var _a;\n\n      var toRemove = [];\n      var now = new Date().getTime();\n\n      var _iterator2 = _createForOfIteratorHelper(this.pending),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var notification = _step2.value;\n\n          if (((_a = notification.schedule) === null || _a === void 0 ? void 0 : _a.at) && notification.schedule.at.getTime() <= now) {\n            this.buildNotification(notification);\n            toRemove.push(notification);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.pending = this.pending.filter(function (notification) {\n        return !toRemove.find(function (n) {\n          return n === notification;\n        });\n      });\n    }\n  }, {\n    key: \"sendNotification\",\n    value: function sendNotification(notification) {\n      var _this2 = this;\n\n      var _a;\n\n      if ((_a = notification.schedule) === null || _a === void 0 ? void 0 : _a.at) {\n        var diff = notification.schedule.at.getTime() - new Date().getTime();\n        this.pending.push(notification);\n        setTimeout(function () {\n          _this2.sendPending();\n        }, diff);\n        return;\n      }\n\n      this.buildNotification(notification);\n    }\n  }, {\n    key: \"buildNotification\",\n    value: function buildNotification(notification) {\n      var localNotification = new Notification(notification.title, {\n        body: notification.body\n      });\n      localNotification.addEventListener('click', this.onClick.bind(this, notification), false);\n      localNotification.addEventListener('show', this.onShow.bind(this, notification), false);\n      return localNotification;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(notification) {\n      var data = {\n        actionId: 'tap',\n        notification: notification\n      };\n      this.notifyListeners('localNotificationActionPerformed', data);\n    }\n  }, {\n    key: \"onShow\",\n    value: function onShow(notification) {\n      this.notifyListeners('localNotificationReceived', notification);\n    }\n  }]);\n\n  return LocalNotificationsWeb;\n}(WebPlugin);","map":{"version":3,"mappings":"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","names":["WebPlugin","LocalNotificationsWeb","window","Notification","requestPermission","permission","e","name","unimplemented","options","hasNotificationSupport","unavailable","notifications","notification","sendNotification","map","id","pending","filter","find","n","checkPermissions","display","value","transformNotificationPermission","toRemove","now","Date","getTime","schedule","_a","at","buildNotification","push","diff","setTimeout","sendPending","localNotification","title","body","addEventListener","onClick","bind","onShow","data","actionId","notifyListeners"],"sources":["/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@capacitor/local-notifications/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { PermissionState } from '@capacitor/core';\n\nimport type {\n  EnabledResult,\n  ListChannelsResult,\n  LocalNotificationSchema,\n  LocalNotificationsPlugin,\n  PendingResult,\n  PermissionStatus,\n  ScheduleOptions,\n  ScheduleResult,\n} from './definitions';\n\nexport class LocalNotificationsWeb\n  extends WebPlugin\n  implements LocalNotificationsPlugin\n{\n  protected pending: LocalNotificationSchema[] = [];\n\n  async createChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async deleteChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async listChannels(): Promise<ListChannelsResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async schedule(options: ScheduleOptions): Promise<ScheduleResult> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    for (const notification of options.notifications) {\n      this.sendNotification(notification);\n    }\n\n    return {\n      notifications: options.notifications.map(notification => ({\n        id: notification.id,\n      })),\n    };\n  }\n\n  async getPending(): Promise<PendingResult> {\n    return {\n      notifications: this.pending,\n    };\n  }\n\n  async registerActionTypes(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async cancel(pending: ScheduleResult): Promise<void> {\n    this.pending = this.pending.filter(\n      notification =>\n        !pending.notifications.find(n => n.id === notification.id),\n    );\n  }\n\n  async areEnabled(): Promise<EnabledResult> {\n    const { display } = await this.checkPermissions();\n\n    return {\n      value: display === 'granted',\n    };\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      await Notification.requestPermission(),\n    );\n\n    return { display };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      Notification.permission,\n    );\n\n    return { display };\n  }\n\n  protected hasNotificationSupport = (): boolean => {\n    if (!('Notification' in window) || !Notification.requestPermission) {\n      return false;\n    }\n\n    if (Notification.permission !== 'granted') {\n      // don't test for `new Notification` if permission has already been granted\n      // otherwise this sends a real notification on supported browsers\n      try {\n        new Notification('');\n      } catch (e) {\n        if (e.name == 'TypeError') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  protected transformNotificationPermission(\n    permission: NotificationPermission,\n  ): PermissionState {\n    switch (permission) {\n      case 'granted':\n        return 'granted';\n      case 'denied':\n        return 'denied';\n      default:\n        return 'prompt';\n    }\n  }\n\n  protected sendPending(): void {\n    const toRemove: LocalNotificationSchema[] = [];\n    const now = new Date().getTime();\n\n    for (const notification of this.pending) {\n      if (\n        notification.schedule?.at &&\n        notification.schedule.at.getTime() <= now\n      ) {\n        this.buildNotification(notification);\n        toRemove.push(notification);\n      }\n    }\n\n    this.pending = this.pending.filter(\n      notification => !toRemove.find(n => n === notification),\n    );\n  }\n\n  protected sendNotification(notification: LocalNotificationSchema): void {\n    if (notification.schedule?.at) {\n      const diff = notification.schedule.at.getTime() - new Date().getTime();\n\n      this.pending.push(notification);\n      setTimeout(() => {\n        this.sendPending();\n      }, diff);\n      return;\n    }\n    this.buildNotification(notification);\n  }\n\n  protected buildNotification(\n    notification: LocalNotificationSchema,\n  ): Notification {\n    const localNotification = new Notification(notification.title, {\n      body: notification.body,\n    });\n    localNotification.addEventListener(\n      'click',\n      this.onClick.bind(this, notification),\n      false,\n    );\n    localNotification.addEventListener(\n      'show',\n      this.onShow.bind(this, notification),\n      false,\n    );\n    return localNotification;\n  }\n\n  protected onClick(notification: LocalNotificationSchema): void {\n    const data = {\n      actionId: 'tap',\n      notification,\n    };\n    this.notifyListeners('localNotificationActionPerformed', data);\n  }\n\n  protected onShow(notification: LocalNotificationSchema): void {\n    this.notifyListeners('localNotificationReceived', notification);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}