{"ast":null,"code":"import _toConsumableArray from \"/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\n * Convert an array of numbers into a DataView.\n */\nexport function numbersToDataView(value) {\n  return new DataView(Uint8Array.from(value).buffer);\n}\n/**\n * Convert a DataView into an array of numbers.\n */\n\nexport function dataViewToNumbers(value) {\n  return Array.from(new Uint8Array(value.buffer));\n}\n/**\n * Convert a string into a DataView.\n */\n\nexport function textToDataView(value) {\n  return numbersToDataView(value.split('').map(function (s) {\n    return s.charCodeAt(0);\n  }));\n}\n/**\n * Convert a DataView into a string.\n */\n\nexport function dataViewToText(value) {\n  return String.fromCharCode.apply(String, _toConsumableArray(dataViewToNumbers(value)));\n}\n/**\n * Convert a 16 bit UUID into a 128 bit UUID string\n * @param value number, e.g. 0x180d\n * @return string, e.g. '0000180d-0000-1000-8000-00805f9b34fb'\n */\n\nexport function numberToUUID(value) {\n  return \"0000\".concat(value.toString(16).padStart(4, '0'), \"-0000-1000-8000-00805f9b34fb\");\n}\nexport function hexStringToDataView(value) {\n  var numbers = value.trim().split(' ').map(function (s) {\n    return parseInt(s, 16);\n  });\n  return numbersToDataView(numbers);\n}\nexport function dataViewToHexString(value) {\n  return dataViewToNumbers(value).map(function (n) {\n    var s = n.toString(16);\n\n    if (s.length == 1) {\n      s = '0' + s;\n    }\n\n    return s;\n  }).join(' ');\n}\nexport function webUUIDToString(uuid) {\n  if (typeof uuid === 'string') {\n    return uuid;\n  } else if (typeof uuid === 'number') {\n    return numberToUUID(uuid);\n  } else {\n    throw new Error('Invalid UUID');\n  }\n}\nexport function mapToObject(map) {\n  var obj = {};\n\n  if (!map) {\n    return undefined;\n  }\n\n  map.forEach(function (value, key) {\n    obj[key.toString()] = value;\n  });\n  return obj;\n}","map":{"version":3,"mappings":";;AAAA;;;AAGA,OAAM,SAAUA,iBAAV,CAA4BC,KAA5B,EAA2C;EAC/C,OAAO,IAAIC,QAAJ,CAAaC,UAAU,CAACC,IAAX,CAAgBH,KAAhB,EAAuBI,MAApC,CAAP;AACD;AAED;;;;AAGA,OAAM,SAAUC,iBAAV,CAA4BL,KAA5B,EAA2C;EAC/C,OAAOM,KAAK,CAACH,IAAN,CAAW,IAAID,UAAJ,CAAeF,KAAK,CAACI,MAArB,CAAX,CAAP;AACD;AAED;;;;AAGA,OAAM,SAAUG,cAAV,CAAyBP,KAAzB,EAAsC;EAC1C,OAAOD,iBAAiB,CAACC,KAAK,CAACQ,KAAN,CAAY,EAAZ,EAAgBC,GAAhB,CAAoB,UAACC,CAAD;IAAA,OAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAP;EAAA,CAApB,CAAD,CAAxB;AACD;AAED;;;;AAGA,OAAM,SAAUC,cAAV,CAAyBZ,KAAzB,EAAwC;EAC5C,OAAOa,MAAM,CAACC,YAAP,aAAM,qBAAiBT,iBAAiB,CAACL,KAAD,CAAlC,EAAb;AACD;AAED;;;;;;AAKA,OAAM,SAAUe,YAAV,CAAuBf,KAAvB,EAAoC;EACxC,qBAAcA,KAAK,CAACgB,QAAN,CAAe,EAAf,EAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAd;AACD;AAED,OAAM,SAAUC,mBAAV,CAA8BlB,KAA9B,EAA2C;EAC/C,IAAMmB,OAAO,GAAanB,KAAK,CAC5BoB,IADuB,GAEvBZ,KAFuB,CAEjB,GAFiB,EAGvBC,GAHuB,CAGnB,UAACC,CAAD;IAAA,OAAOW,QAAQ,CAACX,CAAD,EAAI,EAAJ,CAAf;EAAA,CAHmB,CAA1B;EAIA,OAAOX,iBAAiB,CAACoB,OAAD,CAAxB;AACD;AAED,OAAM,SAAUG,mBAAV,CAA8BtB,KAA9B,EAA6C;EACjD,OAAOK,iBAAiB,CAACL,KAAD,CAAjB,CACJS,GADI,CACA,UAACc,CAAD,EAAM;IACT,IAAIb,CAAC,GAAGa,CAAC,CAACP,QAAF,CAAW,EAAX,CAAR;;IACA,IAAIN,CAAC,CAACc,MAAF,IAAY,CAAhB,EAAmB;MACjBd,CAAC,GAAG,MAAMA,CAAV;IACD;;IACD,OAAOA,CAAP;EACD,CAPI,EAQJe,IARI,CAQC,GARD,CAAP;AASD;AAED,OAAM,SAAUC,eAAV,CAA0BC,IAA1B,EAA+C;EACnD,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAOA,IAAP;EACD,CAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IACnC,OAAOZ,YAAY,CAACY,IAAD,CAAnB;EACD,CAFM,MAEA;IACL,MAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;EACD;AACF;AAED,OAAM,SAAUC,WAAV,CAAyBpB,GAAzB,EAAsD;EAC1D,IAAMqB,GAAG,GAAyB,EAAlC;;EACA,IAAI,CAACrB,GAAL,EAAU;IACR,OAAOsB,SAAP;EACD;;EACDtB,GAAG,CAACuB,OAAJ,CAAY,UAAChC,KAAD,EAAQiC,GAAR,EAAe;IACzBH,GAAG,CAACG,GAAG,CAACjB,QAAJ,EAAD,CAAH,GAAsBhB,KAAtB;EACD,CAFD;EAGA,OAAO8B,GAAP;AACD","names":["numbersToDataView","value","DataView","Uint8Array","from","buffer","dataViewToNumbers","Array","textToDataView","split","map","s","charCodeAt","dataViewToText","String","fromCharCode","numberToUUID","toString","padStart","hexStringToDataView","numbers","trim","parseInt","dataViewToHexString","n","length","join","webUUIDToString","uuid","Error","mapToObject","obj","undefined","forEach","key"],"sources":["/data/data/com.termux/files/home/Ionic/ExploringApp/node_modules/@capacitor-community/bluetooth-le/src/conversion.ts"],"sourcesContent":["/**\n * Convert an array of numbers into a DataView.\n */\nexport function numbersToDataView(value: number[]): DataView {\n  return new DataView(Uint8Array.from(value).buffer);\n}\n\n/**\n * Convert a DataView into an array of numbers.\n */\nexport function dataViewToNumbers(value: DataView): number[] {\n  return Array.from(new Uint8Array(value.buffer));\n}\n\n/**\n * Convert a string into a DataView.\n */\nexport function textToDataView(value: string): DataView {\n  return numbersToDataView(value.split('').map((s) => s.charCodeAt(0)));\n}\n\n/**\n * Convert a DataView into a string.\n */\nexport function dataViewToText(value: DataView): string {\n  return String.fromCharCode(...dataViewToNumbers(value));\n}\n\n/**\n * Convert a 16 bit UUID into a 128 bit UUID string\n * @param value number, e.g. 0x180d\n * @return string, e.g. '0000180d-0000-1000-8000-00805f9b34fb'\n */\nexport function numberToUUID(value: number): string {\n  return `0000${value.toString(16).padStart(4, '0')}-0000-1000-8000-00805f9b34fb`;\n}\n\nexport function hexStringToDataView(value: string): DataView {\n  const numbers: number[] = value\n    .trim()\n    .split(' ')\n    .map((s) => parseInt(s, 16));\n  return numbersToDataView(numbers);\n}\n\nexport function dataViewToHexString(value: DataView): string {\n  return dataViewToNumbers(value)\n    .map((n) => {\n      let s = n.toString(16);\n      if (s.length == 1) {\n        s = '0' + s;\n      }\n      return s;\n    })\n    .join(' ');\n}\n\nexport function webUUIDToString(uuid: string | number): string {\n  if (typeof uuid === 'string') {\n    return uuid;\n  } else if (typeof uuid === 'number') {\n    return numberToUUID(uuid);\n  } else {\n    throw new Error('Invalid UUID');\n  }\n}\n\nexport function mapToObject<V>(map?: Map<string | number, V>): { [key: string]: V } | undefined {\n  const obj: { [key: string]: V } = {};\n  if (!map) {\n    return undefined;\n  }\n  map.forEach((value, key) => {\n    obj[key.toString()] = value;\n  });\n  return obj;\n}\n"]},"metadata":{},"sourceType":"module"}